{"version":3,"sources":["Component/Joke/Joke.js","Component/JokeList/JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","getEmoji","Component","JokeList","handleClick","setState","loading","getJokes","handleVote","id","delta","st","jokes","map","j","localStorage","setItem","JSON","stringify","state","parse","getItem","seenjokes","Set","length","JokesToFetch","axios","get","headers","Accept","res","newJoke","data","joke","has","push","uuid","alert","message","sort","a","b","src","alt","key","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.6fc005df.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Joke.css'\r\n\r\nexport default class Joke extends Component {\r\n\r\n    getColor() {\r\n        if (this.props.votes >= 15) {\r\n          return \"#4CAF50\";\r\n        } else if (this.props.votes >= 12) {\r\n          return \"#8BC34A\";\r\n        } else if (this.props.votes >= 9) {\r\n          return \"#CDDC39\";\r\n        } else if (this.props.votes >= 6) {\r\n          return \"#FFEB3B\";\r\n        } else if (this.props.votes >= 3) {\r\n          return \"#FFC107\";\r\n        } else if (this.props.votes >= 0) {\r\n          return \"#FF9800\";\r\n        } else {\r\n          return \"#f44336\";\r\n        }\r\n      }\r\n      getEmoji() {\r\n        if (this.props.votes >= 15) {\r\n          return \"em em-rolling_on_the_floor_laughing\";\r\n        } else if (this.props.votes >= 12) {\r\n          return \"em em-laughing\";\r\n        } else if (this.props.votes >= 9) {\r\n          return \"em em-smiley\";\r\n        } else if (this.props.votes >= 6) {\r\n          return \"em em-slightly_smiling_face\";\r\n        } else if (this.props.votes >= 3) {\r\n          return \"em em-neutral_face\";\r\n        } else if (this.props.votes >= 0) {\r\n          return \"em em-confused\";\r\n        } else {\r\n          return \"em em-angry\";\r\n        }\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Joke\">\r\n                <div className=\"Joke-buttons\">\r\n                    <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}/>\r\n                    <span className=\"Joke-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\r\n                    <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}/>\r\n                </div>\r\n                <div className=\"Joke-text\">{this.props.text}</div>\r\n                <div className=\"Joke-smiley\">\r\n                \r\n                <i className={this.getEmoji()} ></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n","import React, { Component } from 'react'\r\nimport './JokeList.css'\r\nimport axios from 'axios'\r\nimport uuid from 'uuid/dist/v4'\r\nimport Joke from '../Joke/Joke';\r\n\r\nexport default class JokeList extends Component {\r\n    static defaultProps = {\r\n        JokesToFetch : 10\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            jokes : JSON.parse(localStorage.getItem('jokes') || \"[]\"),\r\n            loading : false\r\n        }\r\n        this.seenjokes = new Set(this.state.jokes.map(j => j.text))\r\n    }\r\n    \r\n    componentDidMount(){\r\n        if(this.state.jokes.length === 0)\r\n            this.getJokes()           \r\n    }\r\n\r\n    async getJokes(){\r\n       try {\r\n        let jokes = []\r\n        while(jokes.length < this.props.JokesToFetch){\r\n            let res = await axios.get(\"https://icanhazdadjoke.com/\",{\r\n                headers : { Accept : \"application/json\" }\r\n            })\r\n            let newJoke = res.data.joke\r\n            if(!this.seenjokes.has(newJoke))\r\n                jokes.push({text : newJoke, votes : 0, id: uuid()})\r\n        }\r\n        this.setState(st => ({\r\n            loading:false,\r\n            jokes : [...st.jokes, ...jokes ]\r\n        }),\r\n        () => localStorage.setItem(\"jokes\",JSON.stringify(this.state.jokes)))\r\n       } catch (error) {\r\n           this.setState({loading:false})\r\n           alert(error.message)\r\n       }\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({loading:true},this.getJokes)\r\n    }\r\n\r\n    handleVote = (id, delta) => {\r\n      this.setState(\r\n          st => ({\r\n              jokes : st.jokes.map( j =>  \r\n                j.id === id ? {...j, votes: j.votes + delta} : j )\r\n          }),\r\n          () => localStorage.setItem(\"jokes\",JSON.stringify(this.state.jokes))\r\n      )\r\n    }\r\n    render() {\r\n        if(this.state.loading){\r\n            return(\r\n                <div className=\"JokeList-spinner\">\r\n                    <i className=\"far fa-8x fa-laugh fa-spin\" />\r\n                    <h1 className=\"Jokelist-title\" >Loading...</h1>\r\n                </div>\r\n            )\r\n        }\r\n        let jokes = this.state.jokes.sort((a,b) => b.votes - a.votes)\r\n        return (\r\n            <div className=\"JokeList\">\r\n                <div className=\"JokeList-sidebar\">\r\n                    <h1 className=\"JokeList-title\">\r\n                    <span>Dad</span> Jokes</h1>\r\n                    <img src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" alt=\"smiley\" />\r\n                    <button className=\"JokeList-getmore\" onClick={this.handleClick}>New Joke</button>\r\n                </div>\r\n                \r\n                <div className=\"JokeList-jokes\">\r\n                    {jokes.map(joke => \r\n                        <Joke \r\n                        key={joke.id} \r\n                        id={joke.id} \r\n                        text={joke.text} \r\n                        votes={joke.votes}\r\n                        upvote={() => this.handleVote(joke.id,1)}\r\n                        downvote={() => this.handleVote(joke.id,-1)}\r\n                        /> \r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n","import React from 'react';\nimport JokeList from './Component/JokeList/JokeList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}